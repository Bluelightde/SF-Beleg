/*
 * generated by Xtext 2.27.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class GreetingsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Greetings");
		private final Assignment cPersonlistAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPersonlistRolleParserRuleCall_0 = (RuleCall)cPersonlistAssignment.eContents().get(0);
		
		//Greetings:
		//    personlist += Rolle*;
		@Override public ParserRule getRule() { return rule; }
		
		//personlist += Rolle*
		public Assignment getPersonlistAssignment() { return cPersonlistAssignment; }
		
		//Rolle
		public RuleCall getPersonlistRolleParserRuleCall_0() { return cPersonlistRolleParserRuleCall_0; }
	}
	public class RolleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Rolle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRolleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRolleIDTerminalRuleCall_1_0 = (RuleCall)cRolleAssignment_1.eContents().get(0);
		private final Assignment cZielAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cZielZielParserRuleCall_2_0 = (RuleCall)cZielAssignment_2.eContents().get(0);
		
		//Rolle:
		//     'Als' Rolle=ID Ziel += Ziel+;
		@Override public ParserRule getRule() { return rule; }
		
		//'Als' Rolle=ID Ziel += Ziel+
		public Group getGroup() { return cGroup; }
		
		//'Als'
		public Keyword getAlsKeyword_0() { return cAlsKeyword_0; }
		
		//Rolle=ID
		public Assignment getRolleAssignment_1() { return cRolleAssignment_1; }
		
		//ID
		public RuleCall getRolleIDTerminalRuleCall_1_0() { return cRolleIDTerminalRuleCall_1_0; }
		
		//Ziel += Ziel+
		public Assignment getZielAssignment_2() { return cZielAssignment_2; }
		
		//Ziel
		public RuleCall getZielZielParserRuleCall_2_0() { return cZielZielParserRuleCall_2_0; }
	}
	public class ZielElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Ziel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMöchteIchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cZielAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cZielIDTerminalRuleCall_1_0 = (RuleCall)cZielAssignment_1.eContents().get(0);
		private final Assignment cNutzenAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNutzenNutzenParserRuleCall_2_0 = (RuleCall)cNutzenAssignment_2.eContents().get(0);
		
		//Ziel:
		//     'möchte ich' Ziel=ID Nutzen += Nutzen+;
		@Override public ParserRule getRule() { return rule; }
		
		//'möchte ich' Ziel=ID Nutzen += Nutzen+
		public Group getGroup() { return cGroup; }
		
		//'möchte ich'
		public Keyword getMöchteIchKeyword_0() { return cMöchteIchKeyword_0; }
		
		//Ziel=ID
		public Assignment getZielAssignment_1() { return cZielAssignment_1; }
		
		//ID
		public RuleCall getZielIDTerminalRuleCall_1_0() { return cZielIDTerminalRuleCall_1_0; }
		
		//Nutzen += Nutzen+
		public Assignment getNutzenAssignment_2() { return cNutzenAssignment_2; }
		
		//Nutzen
		public RuleCall getNutzenNutzenParserRuleCall_2_0() { return cNutzenNutzenParserRuleCall_2_0; }
	}
	public class NutzenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Nutzen");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUmKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNutzenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNutzenIDTerminalRuleCall_1_0 = (RuleCall)cNutzenAssignment_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Nutzen:
		//    ', um' Nutzen=ID '.'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//', um' Nutzen=ID '.'
		public Group getGroup() { return cGroup; }
		
		//', um'
		public Keyword getUmKeyword_0() { return cUmKeyword_0; }
		
		//Nutzen=ID
		public Assignment getNutzenAssignment_1() { return cNutzenAssignment_1; }
		
		//ID
		public RuleCall getNutzenIDTerminalRuleCall_1_0() { return cNutzenIDTerminalRuleCall_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
	}
	
	
	private final GreetingsElements pGreetings;
	private final RolleElements pRolle;
	private final ZielElements pZiel;
	private final NutzenElements pNutzen;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pGreetings = new GreetingsElements();
		this.pRolle = new RolleElements();
		this.pZiel = new ZielElements();
		this.pNutzen = new NutzenElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Greetings:
	//    personlist += Rolle*;
	public GreetingsElements getGreetingsAccess() {
		return pGreetings;
	}
	
	public ParserRule getGreetingsRule() {
		return getGreetingsAccess().getRule();
	}
	
	//Rolle:
	//     'Als' Rolle=ID Ziel += Ziel+;
	public RolleElements getRolleAccess() {
		return pRolle;
	}
	
	public ParserRule getRolleRule() {
		return getRolleAccess().getRule();
	}
	
	//Ziel:
	//     'möchte ich' Ziel=ID Nutzen += Nutzen+;
	public ZielElements getZielAccess() {
		return pZiel;
	}
	
	public ParserRule getZielRule() {
		return getZielAccess().getRule();
	}
	
	//Nutzen:
	//    ', um' Nutzen=ID '.'
	//    ;
	public NutzenElements getNutzenAccess() {
		return pNutzen;
	}
	
	public ParserRule getNutzenRule() {
		return getNutzenAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
