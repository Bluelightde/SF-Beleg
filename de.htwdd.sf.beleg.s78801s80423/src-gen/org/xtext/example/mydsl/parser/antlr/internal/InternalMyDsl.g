/*
 * generated by Xtext 2.27.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Greetings";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleGreetings
entryRuleGreetings returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGreetingsRule()); }
	iv_ruleGreetings=ruleGreetings
	{ $current=$iv_ruleGreetings.current; }
	EOF;

// Rule Greetings
ruleGreetings returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getGreetingsAccess().getPersonlistRolleParserRuleCall_0());
			}
			lv_personlist_0_0=ruleRolle
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getGreetingsRule());
				}
				add(
					$current,
					"personlist",
					lv_personlist_0_0,
					"org.xtext.example.mydsl.MyDsl.Rolle");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleRolle
entryRuleRolle returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRolleRule()); }
	iv_ruleRolle=ruleRolle
	{ $current=$iv_ruleRolle.current; }
	EOF;

// Rule Rolle
ruleRolle returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Als'
		{
			newLeafNode(otherlv_0, grammarAccess.getRolleAccess().getAlsKeyword_0());
		}
		(
			(
				lv_Rolle_1_0=RULE_ID
				{
					newLeafNode(lv_Rolle_1_0, grammarAccess.getRolleAccess().getRolleIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRolleRule());
					}
					setWithLastConsumed(
						$current,
						"Rolle",
						lv_Rolle_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRolleAccess().getZielZielParserRuleCall_2_0());
				}
				lv_Ziel_2_0=ruleZiel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRolleRule());
					}
					add(
						$current,
						"Ziel",
						lv_Ziel_2_0,
						"org.xtext.example.mydsl.MyDsl.Ziel");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleZiel
entryRuleZiel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getZielRule()); }
	iv_ruleZiel=ruleZiel
	{ $current=$iv_ruleZiel.current; }
	EOF;

// Rule Ziel
ruleZiel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='m\u00F6chte ich'
		{
			newLeafNode(otherlv_0, grammarAccess.getZielAccess().getMÃ¶chteIchKeyword_0());
		}
		(
			(
				lv_Ziel_1_0=RULE_ID
				{
					newLeafNode(lv_Ziel_1_0, grammarAccess.getZielAccess().getZielIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getZielRule());
					}
					setWithLastConsumed(
						$current,
						"Ziel",
						lv_Ziel_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getZielAccess().getNutzenNutzenParserRuleCall_2_0());
				}
				lv_Nutzen_2_0=ruleNutzen
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getZielRule());
					}
					add(
						$current,
						"Nutzen",
						lv_Nutzen_2_0,
						"org.xtext.example.mydsl.MyDsl.Nutzen");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleNutzen
entryRuleNutzen returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNutzenRule()); }
	iv_ruleNutzen=ruleNutzen
	{ $current=$iv_ruleNutzen.current; }
	EOF;

// Rule Nutzen
ruleNutzen returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=', um'
		{
			newLeafNode(otherlv_0, grammarAccess.getNutzenAccess().getUmKeyword_0());
		}
		(
			(
				lv_Nutzen_1_0=RULE_ID
				{
					newLeafNode(lv_Nutzen_1_0, grammarAccess.getNutzenAccess().getNutzenIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNutzenRule());
					}
					setWithLastConsumed(
						$current,
						"Nutzen",
						lv_Nutzen_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='.'
		{
			newLeafNode(otherlv_2, grammarAccess.getNutzenAccess().getFullStopKeyword_2());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
