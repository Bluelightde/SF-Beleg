/**
 * generated by Xtext 2.27.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.Rolle;
import org.xtext.example.mydsl.myDsl.Ziel;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Rolle</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.RolleImpl#getRolle <em>Rolle</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.RolleImpl#getZiel <em>Ziel</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RolleImpl extends MinimalEObjectImpl.Container implements Rolle
{
  /**
   * The default value of the '{@link #getRolle() <em>Rolle</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRolle()
   * @generated
   * @ordered
   */
  protected static final String ROLLE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRolle() <em>Rolle</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRolle()
   * @generated
   * @ordered
   */
  protected String rolle = ROLLE_EDEFAULT;

  /**
   * The cached value of the '{@link #getZiel() <em>Ziel</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getZiel()
   * @generated
   * @ordered
   */
  protected EList<Ziel> ziel;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RolleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.ROLLE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getRolle()
  {
    return rolle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRolle(String newRolle)
  {
    String oldRolle = rolle;
    rolle = newRolle;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.ROLLE__ROLLE, oldRolle, rolle));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Ziel> getZiel()
  {
    if (ziel == null)
    {
      ziel = new EObjectContainmentEList<Ziel>(Ziel.class, this, MyDslPackage.ROLLE__ZIEL);
    }
    return ziel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.ROLLE__ZIEL:
        return ((InternalEList<?>)getZiel()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.ROLLE__ROLLE:
        return getRolle();
      case MyDslPackage.ROLLE__ZIEL:
        return getZiel();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.ROLLE__ROLLE:
        setRolle((String)newValue);
        return;
      case MyDslPackage.ROLLE__ZIEL:
        getZiel().clear();
        getZiel().addAll((Collection<? extends Ziel>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.ROLLE__ROLLE:
        setRolle(ROLLE_EDEFAULT);
        return;
      case MyDslPackage.ROLLE__ZIEL:
        getZiel().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.ROLLE__ROLLE:
        return ROLLE_EDEFAULT == null ? rolle != null : !ROLLE_EDEFAULT.equals(rolle);
      case MyDslPackage.ROLLE__ZIEL:
        return ziel != null && !ziel.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (Rolle: ");
    result.append(rolle);
    result.append(')');
    return result.toString();
  }

} //RolleImpl
